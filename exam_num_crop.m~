close all
clc

root_path_write_exam_nums = '~/mai_project_media/exam_numbers/';
root_path_write_unkown_scripts = '~/mai_project_media/unknown_scripts/';

%ground truth = [520 527 1122-520 612-527]
aspect_ratio = (1122-520)/(612-527); %width/height

for j=1:length(exam_info)

close all
   exam_number = rgb2gray(exam_info{j}.cropped_examnum);
   
   exam_number = imadjust(exam_number,stretchlim(exam_number),[]);
   
   bw = edge(exam_number,'canny');
   %figure(3);
   %imshow(bw)
   
   stats = [regionprops(bw); regionprops(not(bw))]; 
   
   tot_pic_area = size(exam_number, 1) * size(exam_number, 2);
   
   stats2 = {};
   inserted = 1;
    hold on;  
    for r = 1:numel(stats)
        
        ar = stats(r).BoundingBox(3) / stats(r).BoundingBox(4);
        area = stats(r).BoundingBox(3) * stats(r).BoundingBox(4);
        
        if area < tot_pic_area * 0.9 && area > tot_pic_area * 0.005 ...
                && ar > aspect_ratio*0.6 ...
                && ar < aspect_ratio*1.2
             
            stats2{inserted} = stats(r);
            inserted = inserted + 1;
            %rectangle('Position', stats(r).BoundingBox, ...
            %'Linewidth', 3, 'EdgeColor', 'r', 'LineStyle', '--');
        
        end
    end
    
    if length(stats2) > 1
        max_area = stats2{1}.Area;
        max_area_ind = 1;
        for r=2:length(stats2)
            if stats2{r}.Area > max_area
                max_area = stats2{r}.Area;
                max_area_ind=r;
            end
        end
        stats = stats2{max_area_ind};
        stats2 = {};
        stats2{1} = stats;
    end
    
    if length(stats2) < 1
        exam_info{j}.flag = 1;
        fprintf('\n flag activated for index: %d \n', j);
    else    
        exam_info{j}.cropped_examnum2 = imcrop(exam_number, stats2{1}.BoundingBox);
    end
    
end

close all
%split exam number up
for i=1:length(exam_info) 
%i=3;

    if exam_info{i}.flag == 0
    
        exam_number = exam_info{i}.cropped_examnum2;
        
        BW = ~imbinarize(exam_number);
        
        %DETECT HOUGH LINES
        [H,T,R] = hough(BW);

        P  = houghpeaks(H,5,'threshold',ceil(0.3*max(H(:))));
        x = T(P(:,2)); y = R(P(:,1));

        lines = houghlines(BW,T,R,P,'FillGap',2,'MinLength',10);
        max_len = 0;
        max_theta = 0;
        for k = 1:length(lines)
           xy = [lines(k).point1; lines(k).point2];

           % Determine the endpoints of the longest line segment
           len = norm(lines(k).point1 - lines(k).point2);
           if ( len > max_len)
              max_len = len;
              xy_long = xy;
              max_theta = lines(k).theta;
           end
        end 

        gray_exam_number = imrotate(exam_number, abs(max_theta) -90 ,'bilinear', 'loose');
        exam_number = imrotate(BW, abs(max_theta) -90 ,'bilinear', 'loose');

        stats = [regionprops(exam_number); regionprops(not(exam_number))];
        % show the image and draw the detected rectangles on it

        [avoid_rects_i, stats] = largest_two_areas(stats);

        stats2={};
        inserted = 1;
        tot_pic_area = size(exam_number, 1)*size(exam_number, 2);

        %x_diff/y_diff = 116/66
        aspect_ratio = 1.758;

        for r=1:length(stats)
            if stats(r).Area < 0.9*tot_pic_area
                if ~(r == avoid_rects_i(1) || r == avoid_rects_i(2))
                    ar = stats(r).BoundingBox(3)/stats(r).BoundingBox(4);
                    if ar < 1.1*aspect_ratio && ar > 0.7*aspect_ratio
                        stats2{inserted} = stats(r);
                        inserted = inserted + 1;
                    end
                end
            end
        end

        %remove rects that are completely inside other rects
        stats={};
        inserted = 1;

        for r=1:length(stats2)
            in_another_rect = false;
           for rr=1:length(stats2)
              if r ~= rr
                  if rectA_contained_in_rectB(stats2{r}.BoundingBox, stats2{rr}.BoundingBox) == true
                      in_another_rect = true;
                  end
              end
           end
           if in_another_rect == false
               stats{inserted} = stats2{r};
               inserted = inserted + 1;
           else
               disp('Rect lay in another rect so ignored')
           end
        end

        imshow(exam_number); 
        hold on;

        for r = 1:length(stats)        
                rectangle('Position', stats{r}.BoundingBox, ...
                'Linewidth', 3, 'EdgeColor', 'r', 'LineStyle', '--');
        end 

       
       close all
        
       if length(stats) < 5 
          %exam_info{i}.flag = 1;
          fprintf('Flag turned on for index: %d \n', i);
       elseif length(stats) > 5
          %exam_info{i}.flag = 1;
          fprintf('Flag turned on for index: %d , too many rects detected \n', i);
       else
           delete_dir_contents(root_path_write_exam_nums);
           path = strcat(root_path_write_exam_nums, 'examscript', int2str(i), ...
                  '/examnums');
           mkdir(path);
           for write_iteration=1:5
              %loop through images 
              ind = find_leftmost_digit(stats);
              %num = imcrop(gray_exam_number, stats{ind}.BoundingBox);
              num = imcrop(exam_number, stats{ind}.BoundingBox);
              num = trim_outside_of_image(num, 0.5);
              figure(1);
              subplot(3,1,1)
              num = cut_image_to_ar_ratio1(num, 0.05);
              imshow(num)
              subplot(3,1,2)
              num = insert_padding(num, 3);
              imshow(num)
              se = offsetstrel('ball',1,2);  
              num = imerode(num,se);
              subplot(3,1,3);
              imshow(num)   
              pause
              num = imresize(num, [28 28]);
              num = uint8(255 * num);
              stats(ind) = [];
              file_name = strcat('/', int2str(write_iteration), '.png');
              full_path = strcat(path, file_name);
              
              imwrite(num, full_path);   
                
           end
           
       end
        
    end
    
    if exam_info{i}.flag == 1
       
        %Write out code to write unsure files here
        
    end
end

function [vector, stats] = largest_two_areas(stats)
    
    max_area = [1;2];
    vector = [0;0];
    
    for r = 1:numel(stats)
        area = stats(r).BoundingBox(3)*stats(r).BoundingBox(4);
        stats(r).Area = area;
        if area > min(max_area)  
            
            ind = find(max_area==min(max_area));
            max_area(ind) = stats(r).Area;
            vector(ind) = r;
        end
    end

end
 
function [bool] = rectA_contained_in_rectB(rectA, rectB)
    bool = false;
    
    %check x's
    if rectA(1) > rectB(1) && (rectA(1)+rectA(3)) < (rectB(1)+rectB(3))
        if rectA(2) > rectB(2) && (rectA(2)+rectA(4)) < (rectB(2)+rectB(4))
            bool = true;
        end
    end
end

function delete_dir_contents(myFolder)

    if ~isdir(myFolder)
      errorMessage = sprintf('Error: The following folder does not exist:\n%s', myFolder);
      uiwait(warndlg(errorMessage));
      return;
    end
    
    % Get a list of all files in the folder with the desired file name pattern.
    filePattern = fullfile(myFolder, '*.*'); % Change to whatever pattern you need.
    theFiles = dir(filePattern);
    for k = 1 : length(theFiles)
      baseFileName = theFiles(k).name;
      fullFileName = fullfile(myFolder, baseFileName);
      fprintf(1, 'Now deleting %s\n', fullFileName);
      delete(fullFileName);
    end

end

function [i] = find_leftmost_digit(stats)
    i=1;
    if length(stats) < 2
        return;
    end
    
    min = stats{1}.BoundingBox(1);
    for j=2:length(stats)
        if min > stats{j}.BoundingBox(1) 
            i=j;
            min = stats{j}.BoundingBox(1);
        end
    end

end

function [J] = trim_outside_of_image(I, T)
    J=I;
    
    %top edge
    remove_edge = true;
    while remove_edge == true
        obj_pixels = 0;
        [cols, rows] = size(J);
        for i=1:rows
            obj_pixels = obj_pixels + J(1, i);
        end
        if obj_pixels >= rows*T
            J = J(2:cols, :);
        else
            remove_edge = false;
        end
    end
    
    %bottom edge
    remove_edge = true;
    while remove_edge == true
        obj_pixels = 0;
        [cols, rows] = size(J);
        for i=1:rows
            obj_pixels = obj_pixels + J(cols, i);
        end
        if obj_pixels >= rows*T
            J = J(1:cols-1, :);
        else
            remove_edge = false;
        end
    end
    
    %left edge
    remove_edge = true;
    while remove_edge == true
        obj_pixels = 0;
        [cols, rows] = size(J);
        for i=1:cols 
            obj_pixels = obj_pixels + J(i, 1);
        end
        if obj_pixels >= cols*T
            J = J(:, 2:rows);
        else
            remove_edge = false;
        end
    end
    
    %right edge
    remove_edge = true;
    while remove_edge == true
        obj_pixels = 0;
        [cols, rows] = size(J);
        for i=1:cols 
            obj_pixels = obj_pixels + J(i, rows);
        end
        if obj_pixels >= cols*T
            J = J(:, 1:rows-1);
        else
            remove_edge = false;
        end
    end
    
end

function [J] = cut_image_to_ar_ratio1(I, T)

    %T is a percentage, so if 0.1, ar must fall between +- 10%

    J=I;
    [cols, rows] = size(J);
    
    cuts_right = 0;
    cuts_left = 0;
    
    ar = rows/cols;
    
    %alternate between sides
    prev_side = 1;
    leniancy = 2;
    
    while ar >= (1 + T) 
        
        [cols, rows] = size(J);
        
        prev_side = 0; %right side
        
        obj_pixels1 = 0;
        
        for i=1:cols 
            obj_pixels1 = obj_pixels1 + J(i, 1); %left side
        end 
        
        obj_pixels2 = 0;
        for i=1:cols 
            obj_pixels2 = obj_pixels2 + J(i, rows); %right side
        end 
        
        
        
        if obj_pixels1 == obj_pixels2
            if prev_side == 1
                J = J(:, 1:rows-1);
                prev_side = 0;
            else 
                J = J(:, 2:rows);
                prev_side = 1;
            end
        elseif obj_pixels1 < obj_pixels2 + leniancy
            %cut left
            J = J(:, 2:rows);
            prev_side = 1;
            cuts_left = cuts_left + 1;
            
        else 
            %cut right
            J = J(:, 1:rows-1);
            prev_side = 0;
            cuts_right = cuts_right + 1;
            
        end
        
        leniancy = -leniancy;
        
        [cols, rows] = size(J);
        ar = rows/cols;
    end
   
end

function [J] = insert_padding(I, n)

    %do top and bottom edge first
    J=I;
    [cols, rows] = size(J);
    
    A = zeros(1, rows);
    
    for i=1:n
        J = [A;J];
        J = [J;A];
    end
    
    [cols, rows] = size(J);
    A = zeros(cols, 1);
    
    for i=1:n
        J = [A J];
        J = [J A];
    end
end


